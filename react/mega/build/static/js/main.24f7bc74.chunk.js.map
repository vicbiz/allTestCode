{"version":3,"sources":["components/InfoBox.js","components/Utility.js","components/MegaTest.js","App.js","registerServiceWorker.js","index.js"],"names":["InfoBox","props","updateSort","sortBy","setState","megaBallNumbers","state","allMegaballWithCountSortedByKey","allMegaballWithCounntSortedByCount","winNumbers","allNumbersWithCountSortedByKey","allNumberCountsSortedByCount","quickPick","pickBy","megaNumbers","pickPickCount","slice","pickedTop10","pickNumbers","length","pickedBtm10","allPickedArray","i","pickedObj","j","tempMega","Math","floor","random","pickedCount","pickedResult","tempNumber","find","k","number","push","Object","assign","megaBall","powerball","pickedNumbers","sort","console","log","allResults","this","allWinPowerBallsArray","map","result","mega_ball","allWinNumbersArray","data","winning_numbers","split","getCount","arrayNumbers","reduce","a","b","allPowerBallCounts","keys","item","wincount","allNumbersWithCount","count","className","type","onClick","key","id","resultNumber","Component","Utility","dt","dType","date","Date","year","getFullYear","month","getMonth","toString","day","getDate","weekday","getDay","weekdayAry","Array","React","MegaTest","error","isLoaded","allWinNumbersAry","message","convertDate","draw_date","App","fetch","then","res","json","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.24f7bc74.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass InfoBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allResults: props.state.allResults, // Passed from App.js\n      megaBallNumbers: [],\n      allMegaballWithCountSortedByKey: [],\n      allMegaballWithCounntSortedByCount: [],\n      winNumbers: [],\n      allNumbersWithCountSortedByKey: [],\n      allNumberCountsSortedByCount: [],\n      pickPickCount: 5,\n      pickedTop10: [],\n      pickedBtm10: [],\n      // pickedTop10: [{powerball:'', pickedNumbers:[]}],\n      // pickedBtm10: [{powerball:'', pickedNumbers:[]}],\n    };\n  }\n\n  updateSort = (sortBy) => {\n    switch (sortBy) {\n      case \"pn\":\n        this.setState({\n          megaBallNumbers: this.state.allMegaballWithCountSortedByKey,\n        });\n        break;\n      case \"pc\":\n        this.setState({\n          megaBallNumbers: this.state.allMegaballWithCounntSortedByCount,\n        });\n        break;\n      case \"nn\":\n        this.setState({\n          winNumbers: this.state.allNumbersWithCountSortedByKey,\n        });\n        break;\n      case \"nc\":\n        this.setState({ winNumbers: this.state.allNumberCountsSortedByCount });\n        break;\n      default:\n        break;\n    }\n  };\n\n  quickPick = (pickBy) => {\n    let megaNumbers = [];\n    let winNumbers = [];\n    const pickPickCount = this.state.pickPickCount;\n\n    switch (pickBy) {\n      case \"top10\":\n        megaNumbers = this.state.allMegaballWithCounntSortedByCount.slice(\n          0,\n          10\n        );\n        winNumbers = this.state.allNumberCountsSortedByCount.slice(0, 10);\n        this.setState({ pickedTop10: pickNumbers(pickBy) });\n        break;\n      case \"btm10\":\n        megaNumbers = this.state.allMegaballWithCounntSortedByCount.slice(\n          megaNumbers.length - 10\n        );\n        winNumbers = this.state.allNumberCountsSortedByCount.slice(\n          winNumbers.length - 10\n        );\n        this.setState({ pickedBtm10: pickNumbers(pickBy) });\n        break;\n      case \"topReset\":\n        this.setState({ pickedTop10: [] });\n        break;\n      case \"btmReset\":\n        this.setState({ pickedBtm10: [] });\n        break;\n      default:\n        break;\n    }\n    // console.log(\"megaNumbers\",megaNumbers,\"winNumbers\",winNumbers);\n\n    function pickNumbers(pickBy) {\n      let allPickedArray = [];\n      for (let i = 0; i < pickPickCount; i++) {\n        let pickedObj = {};\n        for (let j = 0; j < 5; j++) {\n          let tempMega = Math.floor(Math.random() * Math.floor(10));\n          let pickedCount = 0;\n          let pickedResult = [];\n          while (pickedCount < 5) {\n            let tempNumber = Math.floor(Math.random() * Math.floor(10));\n            if (\n              !pickedResult.find((k) => k === winNumbers[tempNumber].number)\n            ) {\n              pickedCount++;\n              pickedResult.push(winNumbers[tempNumber].number);\n            }\n          }\n          Object.assign(pickedObj, {\n            megaBall: megaNumbers[tempMega].powerball,\n            pickedNumbers: pickedResult.sort(),\n          });\n        }\n        // console.log(\"pickedObj\",pickedObj);\n        allPickedArray.push(pickedObj);\n      }\n      console.log(\"allPickedArray\", allPickedArray);\n      return allPickedArray;\n    }\n  };\n\n  componentDidMount() {\n    const allResults = this.state.allResults;\n    // console.log(\"allResults\", allResults);\n\n    const allWinPowerBallsArray = allResults.map((result) => result.mega_ball);\n    const allWinNumbersArray = allResults.map((data) =>\n      data.winning_numbers.split(\" \")\n    );\n    // console.log(\"allWinPowerBallsArray\",allWinPowerBallsArray.length,allWinPowerBallsArray);\n\n    /*\n    // Eliminate Duplicates... using Set\n    const allWinPowerBallsArraySet = Array.from(new Set(allWinPowerBallsArray));\n    console.log(\"allWinPowerBallsArraySet\",allWinPowerBallsArraySet.length,allWinPowerBallsArraySet);\n    */\n\n    const getCount = (arrayNumbers) =>\n      arrayNumbers.reduce(\n        (a, b) => Object.assign(a, { [b]: (a[b] || 0) + 1 }),\n        {}\n      );\n\n    let allPowerBallCounts = getCount(allWinPowerBallsArray);\n\n    // Fill up 0 win...\n    // for (let i = 1; i < 26; i++) {\n    //   let tempKey = i < 10 ? \"0\" + i : \"\" + i;\n    //   !allPowerBallCounts[tempKey]\n    //     ? Object.assign(allPowerBallCounts, { [tempKey]: 0 })\n    //     : \"\";\n    //   console.log(\"tempKey\", tempKey, !allPowerBallCounts[tempKey]);\n    // }\n\n    console.log(\"allPowerBallCounts\", allPowerBallCounts, \"length\");\n\n    const allMegaballWithCountSortedByKey = Object.keys(allPowerBallCounts)\n      .sort((a, b) => a - b)\n      .map((item) => {\n        return { powerball: item, wincount: allPowerBallCounts[item] };\n      });\n    this.setState({\n      allMegaballWithCountSortedByKey: allMegaballWithCountSortedByKey,\n    });\n\n    const allMegaballWithCounntSortedByCount = Object.keys(allPowerBallCounts)\n      .sort((a, b) => allPowerBallCounts[b] - allPowerBallCounts[a])\n      .map((item) => {\n        return { powerball: item, wincount: allPowerBallCounts[item] };\n      });\n    this.setState({\n      allMegaballWithCounntSortedByCount: allMegaballWithCounntSortedByCount,\n    });\n    this.setState({ megaBallNumbers: allMegaballWithCountSortedByKey });\n\n    let allNumbersArray = allWinNumbersArray.reduce((a, b) => [...a, ...b], []);\n    let allNumbersWithCount = getCount(allNumbersArray);\n    let allNumbersWithCountSortedByKey = Object.keys(allNumbersWithCount)\n      .sort((a, b) => a - b)\n      .map((item) => {\n        return { number: item, count: allNumbersWithCount[item] };\n      });\n    this.setState({\n      allNumbersWithCountSortedByKey: allNumbersWithCountSortedByKey,\n    });\n\n    let allNumberCountsSortedByCount = Object.keys(allNumbersWithCount)\n      .sort((a, b) => allNumbersWithCount[b] - allNumbersWithCount[a])\n      .map((item) => {\n        return { number: item, count: allNumbersWithCount[item] };\n      });\n    this.setState({\n      allNumberCountsSortedByCount: allNumberCountsSortedByCount,\n    });\n\n    this.setState({ winNumbers: allNumbersWithCountSortedByKey });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Information</h1>\n        <div className=\"infoBlock\">\n          <div className=\"row infoTitleWrap\">\n            <div className=\"col-12 col-lg-8 infoTitleWrap\">\n              <h4>\n                Mega Ball Number Status (Last {this.state.allResults.length}{\" \"}\n                Draws)\n              </h4>\n            </div>\n            <div className=\"col-12 col-lg-4 aRight\">\n              <button\n                type=\"button\"\n                className=\"btn btn-primary btn-sm\"\n                onClick={() => this.updateSort(\"pn\")}\n              >\n                Sort By Number\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-primary btn-sm\"\n                onClick={() => this.updateSort(\"pc\")}\n              >\n                Sort By Count\n              </button>\n            </div>\n          </div>\n          <div className=\"row infoContentWrap\">\n            <div className=\"col-12\">\n              {this.state.megaBallNumbers.map((result, i) => (\n                <div className=\"ballWrap\" key={i}>\n                  <div className=\"ball powerBall\">{result.powerball}</div>\n                  <div className=\"winCount\">{result.wincount}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"infoBlock\">\n          <div className=\"row infoTitleWrap\">\n            <div className=\"col-12 col-lg-8\">\n              <h4>Winning Number Status</h4>\n            </div>\n            <div className=\"col aRight\">\n              <button\n                type=\"button\"\n                className=\"btn btn-primary btn-sm\"\n                onClick={() => this.updateSort(\"nn\")}\n              >\n                Sort By Number\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-primary btn-sm\"\n                onClick={() => this.updateSort(\"nc\")}\n              >\n                Sort By Count\n              </button>\n            </div>\n          </div>\n          <div className=\"row infoContentWrap\">\n            <div className=\"col-12\">\n              {this.state.winNumbers.map((result, i) => (\n                <div className=\"ballWrap\" key={i}>\n                  <div className=\"ball\">{result.number}</div>\n                  <div className=\"winCount\">{result.count}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"infoBlock pickedResult\">\n          <div className=\"row infoTitleWrap\">\n            <div className=\"col-12 col-lg-8\">\n              <h4>\n                Quick {this.state.pickPickCount} Pick based on Top 10 numbers\n              </h4>\n            </div>\n            <div className=\"col-12 col-lg-4 aRight\">\n              <button\n                type=\"button\"\n                className=\"btn btn-success btn-sm\"\n                onClick={() => this.quickPick(\"top10\")}\n              >\n                Qick Pick\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-warning btn-sm\"\n                onClick={() => this.quickPick(\"topReset\")}\n              >\n                Reset\n              </button>\n            </div>\n          </div>\n          <div className=\"row infoContentWrap\">\n            <div className=\"col-12 col-lg-6\" id=\"topResult\">\n              {this.state.pickedTop10.map((result, i) => (\n                <div key={i}>\n                  {result.pickedNumbers.map((resultNumber, j) => (\n                    <div className=\"ballWrap\" key={j}>\n                      <div className=\"ball\">{resultNumber}</div>\n                    </div>\n                  ))}\n                  <div className=\"ballWrap\">\n                    <div className=\"ball powerBall\">{result.megaBall}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"infoBlock pickedResult\">\n          <div className=\"row infoTitleWrap\">\n            <div className=\"col-12 col-lg-8\">\n              <h4>\n                Quick {this.state.pickPickCount} Pick based on Bottom 10 numbers\n              </h4>\n            </div>\n            <div className=\"col-12 col-lg-4 aRight\">\n              <button\n                type=\"button\"\n                className=\"btn btn-success btn-sm\"\n                onClick={() => this.quickPick(\"btm10\")}\n              >\n                Qick Pick\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-warning btn-sm\"\n                onClick={() => this.quickPick(\"btmReset\")}\n              >\n                Reset\n              </button>\n            </div>\n          </div>\n          <div className=\"row infoContentWrap\">\n            <div className=\"col-12 col-lg-6\" id=\"btmResult\">\n              {this.state.pickedBtm10.map((result, i) => (\n                <div key={i}>\n                  {result.pickedNumbers.map((resultNumber, j) => (\n                    <div className=\"ballWrap\" key={j}>\n                      <div className=\"ball\">{resultNumber}</div>\n                    </div>\n                  ))}\n                  <div className=\"ballWrap\">\n                    <div className=\"ball powerBall\">{result.megaBall}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InfoBox;\n","import React from 'react';\n\nclass Utility extends React.Component {\n    static convertDate(dt, dType) {\n        let date = new Date(dt);\n        let year = date.getFullYear();\n        let month = (1 + date.getMonth()).toString();\n        let day = date.getDate().toString();\n        let weekday = '';\n\n        month = month.length > 1 ? month : '0' + month;\n        day = day.length > 1 ? day : '0' + day;\n\n        if(dType){\n            weekday = this.getDay(dt, dType);\n        }\n        return month + '/' + day + '/' + year + weekday ;\n    };\n\n    static getDay(dt, dType) {\n        let date = new Date(dt);\n        let weekdayAry=new Array(7);\n\n        switch(dType){\n            case 'full' :\n                weekdayAry[0]=\"Monday\";\n                weekdayAry[1]=\"Tuesday\";\n                weekdayAry[2]=\"Wednesday\";\n                weekdayAry[3]=\"Thursday\";\n                weekdayAry[4]=\"Friday\";\n                weekdayAry[5]=\"Saturday\";\n                weekdayAry[6]=\"Sunday\";\n                break;\n            case 'short' :\n                weekdayAry[0]=\"Mon\";\n                weekdayAry[1]=\"Tue\";\n                weekdayAry[2]=\"Wed\";\n                weekdayAry[3]=\"Thu\";\n                weekdayAry[4]=\"Fri\";\n                weekdayAry[5]=\"Sat\";\n                weekdayAry[6]=\"Sun\";\n                break;\n            default :\n                break;\n            }\n\n        return weekdayAry[date.getDay()];\n    };\n\n}\n\nexport default Utility;\n\n","import React, { Component } from 'react';\nimport Utility from './Utility';\n\nclass MegaTest extends Component {\n \n    constructor(props) {\n      super(props);\n      this.state = {\n      };\n    }\n  \n    componentDidMount() {\n    }\n\n\n    render() {\n      const { error, isLoaded, allResults, allWinNumbersAry } = this.props.state;\n      // console.log(\"render22\", error, isLoaded, allResults);\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <table className=\"resultBigTable\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Day</th>\n                <th>Mega Ball</th>\n                <th>Winning Number</th>\n                {/* <th>Multipier</th> */}\n              </tr>\n            </thead>\n            <tbody>\n            {allResults.map((result,i) => (\n              <tr key={i}>\n                <td>{Utility.convertDate(result.draw_date)}</td>\n                <td>{Utility.getDay(result.draw_date, 'short')}</td>\n                <td><div className=\"ball powerBall\">{result.mega_ball}</div></td>\n                <td>\n                  {allWinNumbersAry[i].map((number, j) => <span className=\"ball\" key={j}>{number}</span>)}\n                  {/* {result.winning_numbers} */}\n                </td>\n                {/* <td>{result.multiplier}</td> */}\n              </tr>\n            ))}\n            </tbody>\n          </table>\n        );\n      }\n    }\n  }\n\n  export default MegaTest;","import React, { Component } from 'react';\nimport './App.css';\n\nimport InfoBox from './components/InfoBox';\nimport MegaTest from './components/MegaTest';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      allResults: [],\n      allWinNumbersAry : []\n    };\n  }\n\n  componentWillMount() {\n    fetch(\"https://data.ny.gov/resource/h6w8-42p9.json\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            allResults: result.slice(0,80),\n            // allResults: result,\n            allWinNumbersAry: result.map(data => data.winning_numbers.split(' '))\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, allResults } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"container\">\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <h1 className=\"App-title\">Mega Testing</h1>\n            </header>\n            <div className=\"container\">\n              <InfoBox state = {this.state}/>\n              <MegaTest state = {this.state}/>\n            </div>\n          </div>\n        </div>        \n      );\n    }\n\n    // return (\n    //   <div className=\"container\">\n    //     <div className=\"App\">\n    //       <header className=\"App-header\">\n    //         <h1 className=\"App-title\">Mega Testing</h1>\n    //       </header>\n    //       <div className=\"container\">\n    //         <InfoBox state = {this.state}/>\n    //         <MegaTest state = {this.state}/>\n    //       </div>\n    //     </div>\n    //   </div>\n    // );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}